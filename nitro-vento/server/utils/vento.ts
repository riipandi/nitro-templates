import { constants, access } from 'node:fs/promises'
import { resolve } from 'node:path'
import { type Options as MinifyOptions, minify } from 'html-minifier'
import { isProduction } from 'std-env'
import vento, { type Options } from 'ventojs'
import { DURATION } from '~/utils/datetime'

// Templates that should skip caching
const SKIP_CACHE_TEMPLATES = ['index', 'blog'] as const

type SkipCacheTemplate = (typeof SKIP_CACHE_TEMPLATES)[number]

// Configuration for Vento template engine
const VENTO_OPTIONS: Options = {
  includes: resolve('server/views'),
} as const

// Configuration for HTML minifier
const MINIFY_OPTIONS: MinifyOptions = {
  html5: true,
  caseSensitive: true,
  collapseWhitespace: !process.dev,
  includeAutoGeneratedTags: true,
  maxLineLength: 240,
  preserveLineBreaks: false,
  removeComments: true,
  removeEmptyAttributes: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: false,
  useShortDoctype: true,
} as const

const fileExists = async (path: string): Promise<boolean> => {
  try {
    await access(path, constants.F_OK | constants.R_OK)
    return true
  } catch {
    return false
  }
}

export const renderTemplate = defineCachedFunction(
  async (templatePath: string, data: Record<string, unknown>) => {
    const template = `${templatePath.replaceAll(':', '/')}.vto`
    const fullPath = `${VENTO_OPTIONS.includes}/${template}`
    const vnt = vento(VENTO_OPTIONS)

    try {
      // Determine which template to render
      const templateExists = await fileExists(fullPath)
      const templateToRender = templateExists ? template : 'errors/not-found.vto'

      // Prepare data for the template
      const message = `Page not found: ${templatePath}`
      const templateData = templateExists ? data : { ...data, status: 404, message }

      const render = await vnt.run(templateToRender, templateData)

      if (!render) {
        throw new Error(`Failed to render template: ${templateToRender}`)
      }

      return minify(render.content, MINIFY_OPTIONS)
    } catch (_) {
      throw createError({ status: 404, message: `Page not found: ${templatePath}` })
    }
  },
  {
    shouldBypassCache: (templatePath: string): boolean => {
      const shouldSkipCache = SKIP_CACHE_TEMPLATES.includes(
        templatePath.replace('pages:', '') as SkipCacheTemplate,
      )
      const isBlogPost = /^pages:blog\/.+/.test(templatePath)
      return !isProduction || shouldSkipCache || isBlogPost
    },
    name: 'vento-template',
    maxAge: DURATION.MONTH,
    swr: true,
  },
)
